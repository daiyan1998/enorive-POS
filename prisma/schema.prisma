// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication & Roles
model User {
id        String   @id @default(uuid()) @db.Uuid
email     String   @unique
username  String   @unique
password  String
firstName String
lastName  String
phone     String?
refreshToken String?
role      UserRole @default(WAITER)
isActive  Boolean  @default(true)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Relations
orders        Order[]
activityLogs  ActivityLog[]
createdTables Table[]
}

enum UserRole {
ADMIN
MANAGER
CASHIER
WAITER
}


// Category model
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems   MenuItem[]
}

// Table Management
model Table {
id          String      @id @default(uuid()) @db.Uuid
tableNumber String      @unique
capacity    Int
status      TableStatus @default(AVAILABLE)
location    String? // e.g., "Ground Floor", "Terrace"
createdAt   DateTime    @default(now())
updatedAt   DateTime    @updatedAt
createdBy   String      @db.Uuid

// Relations
creator User    @relation(fields: [createdBy], references: [id])
orders  Order[]
}

enum TableStatus {
AVAILABLE
OCCUPIED
RESERVED
OUT_OF_SERVICE
}

// Menu Management

model MenuItem {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  basePrice       Decimal
  categoryId  String
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)
  isDeleted   Boolean @default(false)
  imageUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category   @relation(fields: [categoryId], references: [id])
  variants   MenuVariant[]
  orderItems OrderItem[]
  inventoryItems InventoryItem[]
}


model MenuVariant {
id         String  @id @default(uuid()) @db.Uuid
menuItemId String  @db.Uuid
name       String // e.g., "Small", "Medium", "Large"
priceAdd   Decimal @default(0) @db.Decimal(10, 2) // Additional price over base price
isActive   Boolean @default(true)
createdAt  DateTime @default(now())
updatedAt  DateTime @updatedAt

// Relations
menuItem   MenuItem    @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
orderItems OrderItem[]

@@unique([menuItemId, name])
}

// Order Management
model Order {
id            String      @id @default(uuid()) @db.Uuid
orderNumber   String      @unique
tableId       String?     @db.Uuid
orderType     OrderType
status        OrderStatus @default(PENDING)
customerName  String?
customerPhone String?
totalAmount   Decimal     @default(0) @db.Decimal(10, 2)
taxAmount     Decimal     @default(0) @db.Decimal(10, 2)
serviceCharge Decimal     @default(0) @db.Decimal(10, 2)
discountAmount Decimal    @default(0) @db.Decimal(10, 2)
finalAmount   Decimal     @default(0) @db.Decimal(10, 2)
notes         String?
kotPrinted    Boolean     @default(false)
kotPrintedAt  DateTime?
createdAt     DateTime    @default(now())
updatedAt     DateTime    @updatedAt
createdBy     String      @db.Uuid

// Relations
creator    User        @relation(fields: [createdBy], references: [id])
table      Table?      @relation(fields: [tableId], references: [id])
orderItems OrderItem[]
bills      Bill[]
}

enum OrderType {
DINE_IN
TAKEAWAY
DELIVERY
}

enum OrderStatus {
PENDING
IN_PREPARATION
READY
SERVED
CANCELLED
}

model OrderItem {
id           String  @id @default(uuid()) @db.Uuid
orderId      String  @db.Uuid
menuItemId   String  @db.Uuid
variantId    String? @db.Uuid
quantity     Int
unitPrice    Decimal @db.Decimal(10, 2)
totalPrice   Decimal @db.Decimal(10, 2)
notes        String?
status       OrderItemStatus @default(PENDING)
createdAt    DateTime @default(now())
updatedAt    DateTime @updatedAt

// Relations
order    Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
menuItem MenuItem     @relation(fields: [menuItemId], references: [id])
variant  MenuVariant? @relation(fields: [variantId], references: [id])
}

enum OrderItemStatus {
PENDING
IN_PREPARATION
READY
SERVED
CANCELLED
}

// Billing & Payments
model Bill {
id             String        @id @default(uuid()) @db.Uuid
billNumber     String        @unique
orderId        String        @db.Uuid
totalAmount    Decimal       @db.Decimal(10, 2)
taxAmount      Decimal       @db.Decimal(10, 2)
serviceCharge  Decimal       @db.Decimal(10, 2)
discountAmount Decimal       @db.Decimal(10, 2)
finalAmount    Decimal       @db.Decimal(10, 2)
isPaid         Boolean       @default(false)
paidAt         DateTime?
createdAt      DateTime      @default(now())
updatedAt      DateTime      @updatedAt

// Relations
order    Order     @relation(fields: [orderId], references: [id])
payments Payment[]
}

model Payment {
id            String        @id @default(uuid()) @db.Uuid
billId        String        @db.Uuid
amount        Decimal       @db.Decimal(10, 2)
paymentMethod PaymentMethod
transactionId String?       // For digital payments
reference     String?       // Additional reference info
status        PaymentStatus @default(COMPLETED)
paidAt        DateTime      @default(now())
createdAt     DateTime      @default(now())

// Relations
bill Bill @relation(fields: [billId], references: [id])
}

enum PaymentMethod {
CASH
CARD
BKASH
NAGAD
ROCKET
UPAY
BANK_TRANSFER
}

enum PaymentStatus {
PENDING
COMPLETED
FAILED
REFUNDED
}

// Inventory Management
model InventoryItem {
id           String  @id @default(uuid()) @db.Uuid
menuItemId   String  @db.Uuid
currentStock Int
minStock     Int
maxStock     Int?
unit         String  @default("pcs") // e.g., "kg", "liters", "pcs"
isActive     Boolean @default(true)
createdAt    DateTime @default(now())
updatedAt    DateTime @updatedAt

// Relations
menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

// Activity Logs
model ActivityLog {
id        String   @id @default(uuid()) @db.Uuid
userId    String   @db.Uuid
action    String   // e.g., "ORDER_CREATED", "PAYMENT_RECEIVED"
entity    String   // e.g., "Order", "Bill", "User"
entityId  String   @db.Uuid
details   Json?    // Additional details in JSON format
ipAddress String?
userAgent String?
createdAt DateTime @default(now())

// Relations
user User @relation(fields: [userId], references: [id])
}

// System Settings
model Setting {
id        String   @id @default(uuid()) @db.Uuid
key       String   @unique
value     String
dataType  String   // "string", "number", "boolean", "json"
category  String   @default("general") // "tax", "service", "general", etc.
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}